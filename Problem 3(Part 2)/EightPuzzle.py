########################################
#   Name:           HillClimber.py
#   Description:    AS1 : Problem 3(Part 2)
#                       An object representation of an eight tile slide puzzle
#   Author:         Xander Palermo <ajp2s@missouristate.edu>
#   Date:           16 March 2025
#
#   Class:          CSC 540 - Introduction to Artificial Intelligence
#   Teacher:        Dr. Rahul Dubey
########################################
import random
from Matrix import Matrix

COORDINATES =  [(0,2), (1,2), (2,2),
                (0,1), (1,1), (2,1),
                (0,0), (1,0),(2,0)]

class EightPuzzle:
    def __init__(self, state : [int | None] = None):
        self.__emptySpace = None
        self.__board = None
        self.__complete = False
        if state is None:
            self.randomize()
        else:
            self.setBoard(state)
        # print(self.__emptySpace)

    '''--- Getter Methods ---'''
    def getState(self) -> list[int | None]:
        """
        :return: a 2D representation of the puzzle
        """
        state = []
        for coord in COORDINATES:
            state.append(self.__board.getCoordinateValue(coord[0], coord[1]))
        return state

    def isComplete (self) -> bool:
        """
        :return: true the puzzle is finished and in the "correct" state, else false
        """
        return self.__complete
    '''----------------------'''

    '''--- Setter Methods ---'''
    def randomize(self):
        """
        Randomizes the state of the puzzle
        :return: the empty tile within the randomized puzzle
        """
        self.__board = Matrix(3)
        validCoordinates = COORDINATES.copy()
        for i in range(1,9):
            success = 0
            while not success:
                choice = random.choice(validCoordinates)
                success = self.__board.setValue(i,choice[0], choice[1])
                validCoordinates.remove(choice)
        self.__emptySpace = validCoordinates[0]
        self.__complete = self.__checkBoard()

    def setBoard(self, state : list[int | None]) -> None:
        """
        Sets the board to a predetermined state
        :pre: state is a 2D list generated by an EightPuzzle object
        :param state: the encoding that the state will be set to
        :return: None
        """
        self.__board = Matrix(3)
        output = None
        for coord in COORDINATES:
            val = state.pop(0)
            self.__board.setValue(val, coord[0], coord[1])
            if val is None:
                output = coord
        self.__emptySpace = output
        self.__complete = self.__checkBoard()
    '''----------------------'''

    def __atomicExchange(self, selected: tuple[int, int]) -> int:
        """
        Swaps the empty tile in the matrix with a pre-established coordinate
        :param selected: the coordinate that the value being placed into the empty tile will be taken from.
        :post: The tile that is selected becomes the new empty tile of the matrix
        :return: 0 if the move cannot be completed, 1 if otherwise
        """
        if selected not in COORDINATES:
            return 0
        self.__board.setValue(self.__board.getCoordinateValue(selected[0], selected[1]), #Place selected tile in empty place
                              self.__emptySpace[0], self.__emptySpace[1])
        self.__emptySpace = (selected[0], selected[1])
        self.__board.setValue(None, self.__emptySpace[0], self.__emptySpace[1], Override=True)     #Set the tile that was selected to None
        self.__complete = self.__checkBoard()
        return 1

    def moveUp(self):
        """
        Moves the tile below the empty tile UP
        :return: -1 if the move cannot be completed, 1 if otherwise
        """
        selected = (self.__emptySpace[0], self.__emptySpace[1] - 1)
        return self.__atomicExchange(selected)

    def moveDown(self):
        """
        Moves the tile above the empty tile UP
        :return: -1 if the move cannot be completed, 1 if otherwise
        """
        selected = (self.__emptySpace[0], self.__emptySpace[1] + 1)
        return self.__atomicExchange(selected)

    def moveLeft(self):
        """
        Moves the tile to the right of the empty tile LEFT
        :return: -1 if the move cannot be completed, 1 if otherwise
        """
        selected = (self.__emptySpace[0] - 1, self.__emptySpace[1])
        return self.__atomicExchange(selected)

    def moveRight(self):
        """
        Moves the tile to the right of the empty tile RIGHT
        :return: -1 if the move cannot be completed, 1 if otherwise
        """
        selected = (self.__emptySpace[0] + 1, self.__emptySpace[1])
        return self.__atomicExchange(selected)

    def __checkBoard(self) -> bool:
        """
        Checks if the board is in a completed state
        :return: True if the board is in a completed state
        """
        if self.__board.getCoordinateValue(0, 2) is not None:
            return False
        for num in range(1,9):
            coord = COORDINATES[num-1]
            if self.__board.getCoordinateValue(coord[0], coord[1]) != num:
                return False
        return True

    def print(self):
        self.__board.print(fill="_")

def main():
    puz = EightPuzzle()
    puz.print()
    state = puz.getState()
    puz = EightPuzzle()
    print()
    puz.print()
    puz.setBoard(state)
    print()
    puz.print()

if __name__ == '__main__':
    main()
